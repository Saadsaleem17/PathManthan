{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\PathManthan\\\\src\\\\components\\\\ChatBot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport '../styles/ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const genAI = new GoogleGenerativeAI('AIzaSyDJ_1NN0wod4DMW1kpx3Bnn7O5bKdJsaDw');\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-pro\"\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n    const userMessage = inputMessage.trim();\n    setMessages(prev => [...prev, {\n      text: userMessage,\n      isUser: true\n    }]);\n    setInputMessage('');\n    setIsLoading(true);\n    try {\n      const prompt = `You are an AI course assistant for an educational platform. Your role is to help users find appropriate courses and provide learning recommendations. The user asks: ${userMessage}\n\nInstructions for your response:\n1. If the query is about course recommendations, suggest specific courses with their platforms (e.g., Udemy, Coursera, YouTube).\n2. If it's a general question, provide helpful educational guidance.\n3. Keep responses concise but informative.\n4. Always maintain a helpful and encouraging tone.\n5. If you're not sure about specific course details, focus on general guidance and learning paths.\n\nPlease respond to: ${userMessage}`;\n      const result = await model.generateContent(prompt);\n      const botMessage = result.response.text();\n      setMessages(prev => [...prev, {\n        text: botMessage,\n        isUser: false\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, {\n        text: \"I apologize, but I'm having trouble connecting right now. Please try again in a moment.\",\n        isUser: false\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: () => setIsOpen(!isOpen),\n      children: isOpen ? 'Ã—' : 'ðŸ’¬'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Course Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"welcome-message\",\n          children: \"Hello! I'm your course assistant. I can help you find the right courses, suggest learning paths, or answer your educational questions. How can I help you today?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.isUser ? 'user-message' : 'bot-message'}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Ask about courses or learning paths...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !inputMessage.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"FLB8ythJ1QdR7jJzwO5//GNTaqs=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","GoogleGenerativeAI","jsxDEV","_jsxDEV","ChatBot","_s","isOpen","setIsOpen","messages","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","genAI","model","getGenerativeModel","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","userMessage","prev","text","isUser","prompt","result","generateContent","botMessage","response","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/PathManthan/src/components/ChatBot.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport '../styles/ChatBot.css';\n\nconst ChatBot: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Array<{ text: string; isUser: boolean }>>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const genAI = new GoogleGenerativeAI('AIzaSyDJ_1NN0wod4DMW1kpx3Bnn7O5bKdJsaDw');\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n\n    const userMessage = inputMessage.trim();\n    setMessages(prev => [...prev, { text: userMessage, isUser: true }]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const prompt = `You are an AI course assistant for an educational platform. Your role is to help users find appropriate courses and provide learning recommendations. The user asks: ${userMessage}\n\nInstructions for your response:\n1. If the query is about course recommendations, suggest specific courses with their platforms (e.g., Udemy, Coursera, YouTube).\n2. If it's a general question, provide helpful educational guidance.\n3. Keep responses concise but informative.\n4. Always maintain a helpful and encouraging tone.\n5. If you're not sure about specific course details, focus on general guidance and learning paths.\n\nPlease respond to: ${userMessage}`;\n\n      const result = await model.generateContent(prompt);\n      const botMessage = result.response.text();\n      setMessages(prev => [...prev, { text: botMessage, isUser: false }]);\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prev => [...prev, { \n        text: \"I apologize, but I'm having trouble connecting right now. Please try again in a moment.\", \n        isUser: false \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <button \n        className=\"chat-button\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        {isOpen ? 'Ã—' : 'ðŸ’¬'}\n      </button>\n\n      {isOpen && (\n        <div className=\"chat-window\">\n          <div className=\"chat-header\">\n            <h3>Course Assistant</h3>\n          </div>\n          \n          <div className=\"messages-container\">\n            {messages.length === 0 && (\n              <div className=\"welcome-message\">\n                Hello! I'm your course assistant. I can help you find the right courses, suggest learning paths, or answer your educational questions. How can I help you today?\n              </div>\n            )}\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`message ${message.isUser ? 'user-message' : 'bot-message'}`}\n              >\n                {message.text}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"message bot-message\">\n                <div className=\"typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          <form onSubmit={handleSendMessage} className=\"input-container\">\n            <input\n              type=\"text\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              placeholder=\"Ask about courses or learning paths...\"\n              disabled={isLoading}\n            />\n            <button type=\"submit\" disabled={isLoading || !inputMessage.trim()}>\n              Send\n            </button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}